
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ohun"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "ohun-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('ohun')

Please cite 'ohun' as: 

 Araya-Salas, M., Smith-Vidaurre, G., Chaverri, G., Brenes, J. C., Chirino, F., Elizondo-Calvo, J., & Rico-Guevara, A. 2023. ohun: an R package for diagnosing and optimizing automatic sound event detection. Methods in Ecology and Evolution. https://doi.org/10.1111/2041-210X.14170
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("consensus_detection")
> ### * consensus_detection
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: consensus_detection
> ### Title: Remove ambiguous detections
> ### Aliases: consensus_detection
> 
> ### ** Examples
> 
> {
+   # load example data
+   data("lbh1", "lbh_reference")
+ 
+   # save sound files
+   tuneR::writeWave(lbh1, file.path(tempdir(), "lbh2.wav"))
+ 
+   # template for the first sound file in 'lbh_reference'
+   templ1 <- lbh_reference[1, ]
+ 
+   # generate template correlations
+   tc <- template_correlator(
+     templates = templ1, path = tempdir(),
+     files = "lbh2.wav"
+   )
+ 
+   # template detection
+   td <- template_detector(template.correlations = tc, threshold = 0.12)
+ 
+   # this detection generates 2 split positives
+   diagnose_detection(
+     reference = lbh_reference[lbh_reference == "lbh2.wav", ],
+     detection = td
+   )
+ 
+   # label detection
+   ltd <- label_detection(
+     reference = lbh_reference[lbh_reference == "lbh2.wav", ],
+     detection = td
+   )
+ 
+   # now they can be filter to keep the detection with the highest score for each split
+   ftd <- consensus_detection(ltd, by = "scores")
+ 
+   # splits must be 0
+   diagnose_detection(
+     reference = lbh_reference[lbh_reference == "lbh2.wav", ],
+     detection = ftd
+   )
+ }
  detections true.positives false.positives false.negatives splits merges
1         73              8              65               1     11      0
    overlap    recall precision  f.score
1 0.8296728 0.8888889  0.109589 0.195122
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("consensus_detection", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("diagnose_detection")
> ### * diagnose_detection
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: diagnose_detection
> ### Title: Evaluate the performance of a sound event detection procedure
> ### Aliases: diagnose_detection
> 
> ### ** Examples
> 
> {
+   # load data
+   data("lbh_reference")
+ 
+   # perfect detection
+   diagnose_detection(reference = lbh_reference, detection = lbh_reference)
+ 
+   # missing one in detection
+   diagnose_detection(reference = lbh_reference, detection = lbh_reference[-1, ])
+ 
+   # an extra one in detection
+   diagnose_detection(reference = lbh_reference[-1, ], detection = lbh_reference)
+ 
+   # with time diagnostics
+   diagnose_detection(
+     reference = lbh_reference[-1, ],
+     detection = lbh_reference, time.diagnostics = TRUE
+   )
+ 
+   # and extra sound file in reference
+   diagnose_detection(
+     reference = lbh_reference,
+     detection =
+       lbh_reference[lbh_reference$sound.files != "lbh1", ]
+   )
+ 
+   # and extra sound file in detection
+   diagnose_detection(
+     reference =
+       lbh_reference[lbh_reference$sound.files != "lbh1", ],
+     detection = lbh_reference
+   )
+ 
+   # and extra sound file in detection by sound file
+   dd <- diagnose_detection(
+     reference =
+       lbh_reference[lbh_reference$sound.files != "lbh1", ],
+     detection = lbh_reference, time.diagnostics = TRUE, by.sound.file = TRUE
+   )
+ 
+   # get summary
+   summarize_diagnostic(dd)
+ }
  detections true.positives false.positives false.negatives splits merges
1         19             19               0               0      0      0
  overlap recall precision f.score
1       1      1         1       1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("diagnose_detection", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("energy_detector")
> ### * energy_detector
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: energy_detector
> ### Title: Detects the start and end of sound events
> ### Aliases: energy_detector
> 
> ### ** Examples
> 
> ## No test: 
> # Save example files into temporary working directory
> data("lbh1", "lbh2", "lbh_reference")
> tuneR::writeWave(lbh1, file.path(tempdir(), "lbh1.wav"))
> tuneR::writeWave(lbh2, file.path(tempdir(), "lbh2.wav"))
> 
> # using smoothing and minimum duration
> detec <- energy_detector(files = c("lbh1.wav", "lbh2.wav"),
+ path = tempdir(), threshold = 6, smooth = 6.8,
+ bp = c(2, 9), hop.size = 3, min.duration = 0.05)
> 
> # diagnose detection
> diagnose_detection(reference = lbh_reference,
+ detection = detec)
  detections true.positives false.positives false.negatives splits merges
1         86             19              67               0      0      0
    overlap recall precision   f.score
1 0.8511668      1 0.2209302 0.3619048
> 
> # without declaring 'files'
> detec <- energy_detector(path = tempdir(), threshold = 60, smooth = 6.8,
+ bp = c(2, 9), hop.size = 6.8, min.duration = 90)
> 
> # diagnose detection
> diagnose_detection(reference = lbh_reference,
+ detection = detec)
  detections true.positives false.positives false.negatives splits merges
1          0              0               0              19      0      0
  overlap recall precision f.score
1      NA      0         0      NA
> 
> # using hold time
> detec <- energy_detector(threshold = 10, hold.time = 150,
+ bp = c(2, 9), hop.size = 6.8, path = tempdir())
> 
> # diagnose detection
> diagnose_detection(reference = lbh_reference, detection = detec)
  detections true.positives false.positives false.negatives splits merges
1         19             19               0               0      0      0
    overlap recall precision f.score
1 0.8774537      1         1       1
> 
> # calculate envelopes first
> envs <- get_envelopes(bp = c(2, 9), hop.size = 6.8, path = tempdir())
> 
> # then run detection providing 'envelopes' (but no 'files')
> detec <- energy_detector(envelopes = envs, threshold = 10, hold.time = 150, min.duration = 50)
> 
> # diagnose detection
> diagnose_detection(reference = lbh_reference, detection = detec, time.diagnostics = TRUE)
  detections true.positives false.positives false.negatives splits merges
1         19             19               0               0      0      0
    overlap mean.duration.true.positives mean.duration.false.positives
1 0.8774537                          152                            NA
  mean.duration.false.negatives proportional.duration.true.positives recall
1                            NA                              1.06869      1
  precision f.score
1         1       1
> 
> # USIN OTHER SOUND FILE FORMAT (flac program must be installed)
>  # fisrt convert files to flac
>  warbleR::wav_2_flac(path = tempdir())
flac 1.3.3
flac 1.3.3
> 
>  # change sound file extension to flac
>  flac_reference <- lbh_reference
>  flac_reference$sound.files <- gsub(".wav", ".flac", flac_reference$sound.files)
> 
>  # run detection
>  detec <- energy_detector(files = c("lbh1.flac", "lbh2.flac"), path = tempdir(), threshold = 60,
+  smooth = 6.8, bp = c(2, 9), hop.size = 6.8, min.duration = 90)
> 
>  # diagnose detection
>  diagnose_detection(reference = flac_reference, detection = detec)
  detections true.positives false.positives false.negatives splits merges
1          0              0               0              19      0      0
  overlap recall precision f.score
1      NA      0         0      NA
> ## End(No test)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("energy_detector", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_envelopes")
> ### * get_envelopes
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_envelopes
> ### Title: Extract absolute amplitude envelopes
> ### Aliases: get_envelopes
> 
> ### ** Examples
> 
> {
+   # Save to temporary working directory
+   data(list = c("lbh1", "lbh2"))
+   tuneR::writeWave(lbh1, file.path(tempdir(), "lbh1.wav"))
+   tuneR::writeWave(lbh2, file.path(tempdir(), "lbh2.wav"))
+ 
+   # get raw absolute amplitude envelopes
+   envs <- get_envelopes(path = tempdir())
+ 
+   # extract segment for the first sound event in the first sound file
+   x <- envs[[1]]$envelope
+ 
+   # and plot it
+   plot(x[(length(x) / 9):(length(x) / 4)], type = "l", xlab = "samples", ylab = "amplitude")
+ 
+   # smoothing envelopes
+   envs <- get_envelopes(path = tempdir(), smooth = 6.8)
+   x <- envs[[1]]$envelope
+   plot(x[(length(x) / 9):(length(x) / 4)], type = "l", xlab = "samples", ylab = "amplitude")
+ 
+   # smoothing and thinning
+   envs <- get_envelopes(path = tempdir(), thinning = 1 / 10, smooth = 6.8)
+   x <- envs[[1]]$envelope
+   plot(x[(length(x) / 9):(length(x) / 4)], type = "l", xlab = "samples", ylab = "amplitude")
+ 
+   # no normalization
+   envs <- get_envelopes(path = tempdir(), thinning = 1 / 10, smooth = 6.8)
+   x <- envs[[1]]$envelope
+   plot(x[(length(x) / 9):(length(x) / 4)],
+     type = "l", xlab = "samples", ylab = "amplitude",
+     normalize = FALSE
+   )
+ }
Warning in plot.window(...) : "normalize" is not a graphical parameter
Warning in plot.xy(xy, type, ...) :
  "normalize" is not a graphical parameter
Warning in axis(side = side, at = at, labels = labels, ...) :
  "normalize" is not a graphical parameter
Warning in axis(side = side, at = at, labels = labels, ...) :
  "normalize" is not a graphical parameter
Warning in box(...) : "normalize" is not a graphical parameter
Warning in title(...) : "normalize" is not a graphical parameter
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_envelopes", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_templates")
> ### * get_templates
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_templates
> ### Title: Find templates representative of the structural variation of
> ###   sound events
> ### Aliases: get_templates
> 
> ### ** Examples
> 
> {
+   # Save example files into temporary working directory
+   data("lbh1", "lbh2", "lbh_reference")
+   tuneR::writeWave(lbh1, file.path(tempdir(), "lbh1.wav"))
+   tuneR::writeWave(lbh2, file.path(tempdir(), "lbh2.wav"))
+ 
+   # get a single mean template
+   template <- get_templates(reference = lbh_reference, path = tempdir())
+ 
+   # get 3 templates
+   template <- get_templates(reference = lbh_reference, n.sub.spaces = 3, path = tempdir())
+ }
The first 2 principal components explained 0.68 of the variance
The first 2 principal components explained 0.68 of the variance
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_templates", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("label_detection")
> ### * label_detection
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: label_detection
> ### Title: Label detections from a sound event detection procedure
> ### Aliases: label_detection
> 
> ### ** Examples
> 
> {
+   # load data
+   data("lbh_reference")
+ 
+   # an extra one in detection (1 false positive)
+   label_detection(reference = lbh_reference[-1, ], detection = lbh_reference)
+ 
+   # missing one in detection (all true positives)
+   label_detection(reference = lbh_reference, detection = lbh_reference[-1, ])
+ 
+   # perfect detection (all true positives)
+   label_detection(reference = lbh_reference, detection = lbh_reference)
+ 
+   # and extra sound file in reference (all true positives)
+   label_detection(
+     reference = lbh_reference, detection =
+       lbh_reference[lbh_reference$sound.files != "lbh1.wav", ]
+   )
+ 
+   # and extra sound file in detection (some false positives)
+   label_detection(
+     reference =
+       lbh_reference[lbh_reference$sound.files != "lbh1.wav", ],
+     detection = lbh_reference
+   )
+ 
+   # duplicate 1 detection row (to get 2 splits)
+   detec <- lbh_reference[c(1, seq_len(nrow(lbh_reference))), ]
+   detec$selec[1] <- 1.2
+   label_detection(
+     reference = lbh_reference,
+     detection = detec
+   )
+ 
+   # merge 2 detections (to get split and merge)
+   Y <- lbh_reference
+   Y$end[1] <- 1.2
+   label_detection(reference = lbh_reference, detection = Y)
+ 
+   # remove split to get only merge
+   Y <- Y[-2, ]
+   label_detection(reference = lbh_reference, detection = Y)
+ }
Object of class 'selection_table'
* The output of the following call:
label_detection(reference = lbh_reference, detection = Y)

Contains: *  A selection table data frame with 18 rows and 9 columns:
|sound.files | selec|  start|    end| bottom.freq| top.freq|
|:-----------|-----:|------:|------:|-----------:|--------:|
|lbh2.wav    |     1| 0.1092| 1.2000|      2.2954|   8.9382|
|lbh2.wav    |     3| 1.2658| 1.3856|      2.2606|   9.0774|
|lbh2.wav    |     4| 1.8697| 2.0053|      2.1911|   8.9035|
|lbh2.wav    |     5| 2.4418| 2.5809|      2.1563|   8.6600|
|lbh2.wav    |     6| 3.0368| 3.1689|      2.2259|   8.9382|
|lbh2.wav    |     7| 3.6286| 3.7466|      2.3302|   8.6252|
... 3 more column(s) (detection.class, reference, overlap)
 and 12 more row(s)

 * A data frame (check.results) generated by check_sels() (as attribute) 
created by warbleR < 1.1.21
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("label_detection", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("label_spectro")
> ### * label_spectro
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: label_spectro
> ### Title: Plot a labeled spectrogram
> ### Aliases: label_spectro
> 
> ### ** Examples
> 
> {
+   # load example data
+   data(list = "lbh1", "lbh_reference")
+ 
+   # adding labels
+   label_spectro(
+     wave = lbh1,
+     reference = lbh_reference[lbh_reference$sound.files == "lbh1.wav", ],
+     wl = 200, ovlp = 50, flim = c(1, 10)
+   )
+ 
+   # adding envelope
+   label_spectro(
+     wave = lbh1,
+     detection = lbh_reference[lbh_reference$sound.files == "lbh1.wav", ],
+     wl = 200, ovlp = 50, flim = c(1, 10)
+   )
+ 
+   # see the package vignette for more examples
+ }
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("label_spectro", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("merge_overlaps")
> ### * merge_overlaps
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: merge_overlaps
> ### Title: Merge overlapping selections
> ### Aliases: merge_overlaps
> 
> ### ** Examples
> 
> {
+   # load data
+   data("lbh_reference")
+ 
+   # nothing to merge
+   merge_overlaps(lbh_reference)
+ 
+   # create artificial overlapping selections
+   lbh_ref2 <- rbind(as.data.frame(lbh_reference[c(3, 10), ]), lbh_reference[c(3, 10), ])
+ 
+   lbh_ref2$selec <- seq_len(nrow(lbh_ref2))
+ 
+   merge_overlaps(lbh_ref2)
+ }
[1] "Detecting overlapping selections:"
[1] "Detecting overlapping selections:"
[1] "Merging overlapping selections:"
  sound.files selec    start       end bottom.freq top.freq
1    lbh1.wav     2 0.088118 0.2360047      1.9824   8.4861
2    lbh2.wav     1 1.265850 1.3855678      2.2606   9.0774
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("merge_overlaps", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("optimize_energy_detector")
> ### * optimize_energy_detector
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: optimize_energy_detector
> ### Title: Optimize energy-based sound event detection
> ### Aliases: optimize_energy_detector
> 
> ### ** Examples
> 
> ## No test: 
> # Save example files into temporary working directory
> data("lbh1", "lbh2", "lbh_reference")
> tuneR::writeWave(lbh1, file.path(tempdir(), "lbh1.wav"))
> tuneR::writeWave(lbh2, file.path(tempdir(), "lbh2.wav"))
> 
> # using smoothing and minimum duration
> optimize_energy_detector(
+   reference = lbh_reference, path = tempdir(),
+   threshold = c(6, 10), smooth = 6.8, bp = c(2, 9), hop.size = 6.8,
+   min.duration = 90
+ )
2 combinations will be evaluated:
  threshold peak.amplitude smooth hold.time min.duration max.duration thinning
1         6              0    6.8         0           90          Inf        1
2        10              0    6.8         0           90          Inf        1
  detections true.positives false.positives false.negatives splits merges
1         19             19               0               0      0      0
2         19             19               0               0      0      0
    overlap mean.duration.true.positives mean.duration.false.positives
1 0.8526227                          164                            NA
2 0.9081851                          147                            NA
  mean.duration.false.negatives proportional.duration.true.positives duty.cycle
1                            NA                             1.153234  0.3113362
2                            NA                             1.032732  0.2789096
  recall precision f.score
1      1         1       1
2      1         1       1
> 
> # with thinning and smoothing
> optimize_energy_detector(
+   reference = lbh_reference, path = tempdir(),
+   threshold = c(6, 10, 15), smooth = c(7, 10), thinning = c(0.1, 0.01),
+   bp = c(2, 9), hop.size = 6.8, min.duration = 90
+ )
12 combinations will be evaluated:
   threshold peak.amplitude smooth hold.time min.duration max.duration thinning
1          6              0      7         0           90          Inf     0.10
2         10              0      7         0           90          Inf     0.10
3         15              0      7         0           90          Inf     0.10
4          6              0     10         0           90          Inf     0.10
5         10              0     10         0           90          Inf     0.10
6         15              0     10         0           90          Inf     0.10
7          6              0      7         0           90          Inf     0.01
8         10              0      7         0           90          Inf     0.01
9         15              0      7         0           90          Inf     0.01
10         6              0     10         0           90          Inf     0.01
11        10              0     10         0           90          Inf     0.01
12        15              0     10         0           90          Inf     0.01
   detections true.positives false.positives false.negatives splits merges
1          19             19               0               0      0      0
2          19             19               0               0      0      0
3          19             19               0               0      0      0
4          19             19               0               0      0      0
5          19             19               0               0      0      0
6          19             19               0               0      0      0
7          19             19               0               0      0      0
8          19             19               0               0      0      0
9          19             19               0               0      0      0
10         19             19               0               0      0      0
11         19             19               0               0      0      0
12         19             19               0               0      0      0
     overlap mean.duration.true.positives mean.duration.false.positives
1  0.8494709                          165                            NA
2  0.9065211                          147                            NA
3  0.9227890                          136                            NA
4  0.8300895                          169                            NA
5  0.9018598                          149                            NA
6  0.9192277                          139                            NA
7  0.8265783                          164                            NA
8  0.8872974                          149                            NA
9  0.9075075                          137                            NA
10 0.8103066                          171                            NA
11 0.8863643                          150                            NA
12 0.9044356                          140                            NA
   mean.duration.false.negatives proportional.duration.true.positives
1                             NA                            1.1573464
2                             NA                            1.0337601
3                             NA                            0.9542338
4                             NA                            1.1921639
5                             NA                            1.0501397
6                             NA                            0.9780232
7                             NA                            1.1575802
8                             NA                            1.0474697
9                             NA                            0.9631188
10                            NA                            1.2023828
11                            NA                            1.0558039
12                            NA                            0.9802918
   duty.cycle recall precision f.score
1   0.3125000      1         1       1
2   0.2792090      1         1       1
3   0.2581187      1         1       1
4   0.3218886      1         1       1
5   0.2836085      1         1       1
6   0.2642870      1         1       1
7   0.3124432      1         1       1
8   0.2829246      1         1       1
9   0.2602180      1         1       1
10  0.3247048      1         1       1
11  0.2851953      1         1       1
12  0.2647593      1         1       1
> 
> # by sound file
> (opt_ed <- optimize_energy_detector(
+   reference = lbh_reference,
+   path = tempdir(), threshold = c(6, 10, 15), smooth = 6.8, bp = c(2, 9),
+   hop.size = 6.8, min.duration = 90, by.sound.file = TRUE
+ ))
3 combinations will be evaluated:
  sound.files threshold peak.amplitude smooth hold.time min.duration
1    lbh2.wav         6              0    6.8         0           90
2    lbh1.wav         6              0    6.8         0           90
3    lbh2.wav        10              0    6.8         0           90
4    lbh1.wav        10              0    6.8         0           90
5    lbh2.wav        15              0    6.8         0           90
6    lbh1.wav        15              0    6.8         0           90
  max.duration thinning detections true.positives false.positives
1          Inf        1          9              9               0
2          Inf        1         10             10               0
3          Inf        1          9              9               0
4          Inf        1         10             10               0
5          Inf        1          9              9               0
6          Inf        1         10             10               0
  false.negatives splits merges mean.duration.true.positives
1               0      0      0                          159
2               0      0      0                          168
3               0      0      0                          142
4               0      0      0                          151
5               0      0      0                          128
6               0      0      0                          142
  mean.duration.false.positives mean.duration.false.negatives   overlap
1                            NA                            NA 0.8044589
2                            NA                            NA 0.8959702
3                            NA                            NA 0.8747964
4                            NA                            NA 0.9382350
5                            NA                            NA 0.9221066
6                            NA                            NA 0.9235634
  proportional.duration.true.positives duty.cycle recall precision f.score
1                            1.2125978  0.2869232      1         1       1
2                            1.0998059  0.3357491      1         1       1
3                            1.0803862  0.2556395      1         1       1
4                            0.9898431  0.3021796      1         1       1
5                            0.9759279  0.2309227      1         1       1
6                            0.9322323  0.2845922      1         1       1
> 
> # summarize
> summarize_diagnostic(opt_ed)
  threshold peak.amplitude smooth hold.time min.duration max.duration thinning
1         6              0    6.8         0           90          Inf        1
2        10              0    6.8         0           90          Inf        1
3        15              0    6.8         0           90          Inf        1
  detections true.positives false.positives false.negatives splits merges
1         19             19               0               0      0      0
2         19             19               0               0      0      0
3         19             19               0               0      0      0
    overlap recall precision f.score
1 0.8526227      1         1       1
2 0.9081851      1         1       1
3 0.9228733      1         1       1
> 
> # using hold time
> (op_ed <- optimize_energy_detector(
+   reference = lbh_reference,
+   threshold = 10, hold.time = c(100, 150), bp = c(2, 9), hop.size = 6.8,
+   path = tempdir()
+ ))
2 combinations will be evaluated:
  threshold peak.amplitude smooth hold.time min.duration max.duration thinning
1        10              0      5       100         -Inf          Inf        1
2        10              0      5       150         -Inf          Inf        1
  detections true.positives false.positives false.negatives splits merges
1         19             19               0               0      0      0
2         19             19               0               0      0      0
    overlap mean.duration.true.positives mean.duration.false.positives
1 0.8774537                          152                            NA
2 0.8774537                          152                            NA
  mean.duration.false.negatives proportional.duration.true.positives duty.cycle
1                            NA                              1.06869  0.2890185
2                            NA                              1.06869  0.2890185
  recall precision f.score
1      1         1       1
2      1         1       1
> 
> # including previous output in new call
> optimize_energy_detector(
+   reference = lbh_reference, threshold = 10,
+   hold.time = c(50, 200), previous.output = op_ed, smooth = 6.8,
+   bp = c(2, 9), hop.size = 7, path = tempdir()
+ )
2 combinations will be evaluated:
  threshold peak.amplitude smooth hold.time min.duration max.duration thinning
1        10              0    5.0       100         -Inf          Inf        1
2        10              0    5.0       150         -Inf          Inf        1
3        10              0    6.8        50         -Inf          Inf        1
4        10              0    6.8       200         -Inf          Inf        1
  detections true.positives false.positives false.negatives splits merges
1         19             19               0               0      0      0
2         19             19               0               0      0      0
3         20             19               1               0      0      0
4         19             19               0               0      0      0
    overlap mean.duration.true.positives mean.duration.false.positives
1 0.8774537                          152                            NA
2 0.8774537                          152                            NA
3 0.8897689                          150                             2
4 0.8763392                          153                            NA
  mean.duration.false.negatives proportional.duration.true.positives duty.cycle
1                            NA                             1.068690  0.2890185
2                            NA                             1.068690  0.2890185
3                            NA                             1.056741  0.2855536
4                            NA                             1.074756  0.2905922
  recall precision  f.score
1      1      1.00 1.000000
2      1      1.00 1.000000
3      1      0.95 0.974359
4      1      1.00 1.000000
> 
> # having and extra file in files (simulating a file that should have no detetions)
> sub_reference <- lbh_reference[lbh_reference$sound.files != "lbh1.wav", ]
> 
> optimize_energy_detector(
+   reference = sub_reference, files = unique(lbh_reference$sound.files),
+   threshold = 10, hold.time = c(1, 150), bp = c(2, 9), smooth = 6.8,
+   hop.size = 7, path = tempdir()
+ )
2 combinations will be evaluated:
  threshold peak.amplitude smooth hold.time min.duration max.duration thinning
1        10              0    6.8         1         -Inf          Inf        1
2        10              0    6.8       150         -Inf          Inf        1
  detections true.positives false.positives false.negatives splits merges
1         28              9              19               0      0      0
2         19              9              10               0      0      0
    overlap mean.duration.true.positives mean.duration.false.positives
1 0.8677330                          143                             2
2 0.8543355                          146                            NA
  mean.duration.false.negatives proportional.duration.true.positives duty.cycle
1                            NA                             1.089011  0.2829051
2                            NA                             1.106874  0.2905922
  recall precision   f.score
1      1 0.3214286 0.4864865
2      1 0.4736842 0.6428571
> ## End(No test)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("optimize_energy_detector", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("optimize_template_detector")
> ### * optimize_template_detector
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: optimize_template_detector
> ### Title: Optimize acoustic template detection
> ### Aliases: optimize_template_detector
> 
> ### ** Examples
> 
> {
+ # Save sound files to temporary working directory
+ data("lbh1", "lbh2", "lbh_reference")
+ tuneR::writeWave(lbh1, file.path(tempdir(), "lbh1.wav"))
+ tuneR::writeWave(lbh2, file.path(tempdir(), "lbh2.wav"))
+ 
+ # template for the second sound file in 'lbh_reference'
+ templ <- lbh_reference[11, ]
+ 
+ # generate template correlations
+ tc <- template_correlator(templates = templ, path = tempdir(),
+ files = "lbh2.wav")
+ 
+ # using 2 threshold
+ optimize_template_detector(template.correlations = tc, reference =
+ lbh_reference[lbh_reference$sound.files == "lbh2.wav", ],
+ threshold = c(0.2, 0.5))
+ 
+ # using several thresholds
+ optimize_template_detector(template.correlations = tc,
+ reference = lbh_reference[lbh_reference$sound.files == "lbh2.wav", ],
+  threshold = seq(0.5, 0.9, by = 0.05))
+ 
+  # template for the first and second sound file in 'lbh_reference'
+  templ <- lbh_reference[c(1, 11), ]
+ 
+  # generate template correlations
+  tc <- template_correlator(templates = templ, path = tempdir(),
+  files = c("lbh1.wav", "lbh2.wav"))
+ 
+ optimize_template_detector(template.correlations = tc, reference =
+   lbh_reference, threshold = seq(0.5, 0.7, by = 0.1))
+ 
+  # showing diagnostics by sound file
+  optimize_template_detector(template.correlations = tc, reference =
+  lbh_reference,
+  threshold = seq(0.5, 0.7, by = 0.1), by.sound.file = TRUE)
+ }
2 thresholds will be evaluated:
9 thresholds will be evaluated:
3 thresholds will be evaluated:
3 thresholds will be evaluated:
   threshold sound.files   templates detections true.positives false.positives
1        0.5    lbh2.wav  lbh2.wav-1          9              9               0
2        0.5    lbh1.wav  lbh2.wav-1          0              0               0
3        0.5    lbh1.wav lbh1.wav-11         10             10               0
4        0.5    lbh2.wav lbh1.wav-11          0              0               0
5        0.6    lbh2.wav  lbh2.wav-1          9              9               0
6        0.6    lbh1.wav  lbh2.wav-1          0              0               0
7        0.6    lbh1.wav lbh1.wav-11         10             10               0
8        0.6    lbh2.wav lbh1.wav-11          0              0               0
9        0.7    lbh2.wav  lbh2.wav-1          7              7               0
10       0.7    lbh1.wav  lbh2.wav-1          0              0               0
11       0.7    lbh1.wav lbh1.wav-11          4              4               0
12       0.7    lbh2.wav lbh1.wav-11          0              0               0
   false.negatives splits merges   overlap    recall precision   f.score
1                0      0      0 0.8562007 1.0000000         1 1.0000000
2               10     NA     NA        NA 0.0000000         0 0.0000000
3                0      0      0 0.8917651 1.0000000         1 1.0000000
4                9     NA     NA        NA 0.0000000         0 0.0000000
5                0      0      0 0.8562007 1.0000000         1 1.0000000
6               10     NA     NA        NA 0.0000000         0 0.0000000
7                0      0      0 0.8917651 1.0000000         1 1.0000000
8                9     NA     NA        NA 0.0000000         0 0.0000000
9                2      0      0 0.8436591 0.7777778         1 0.8750000
10              10     NA     NA        NA 0.0000000         0 0.0000000
11               6      0      0 0.9326121 0.4000000         1 0.5714286
12               9     NA     NA        NA 0.0000000         0 0.0000000
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("optimize_template_detector", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot_detection")
> ### * plot_detection
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot_detection
> ### Title: Plot detection and reference annotations
> ### Aliases: plot_detection
> 
> ### ** Examples
> 
> {
+   # load data
+   data("lbh_reference")
+ 
+   # mid point and regular size
+   plot_detection(
+     reference = lbh_reference[-14, ],
+     detection = lbh_reference[-1, ], mid.point = TRUE
+   )
+ 
+   # mid point and larger size
+   plot_detection(
+     reference = lbh_reference[-14, ],
+     detection = lbh_reference[-1, ], mid.point = TRUE, size = 25
+   )
+ 
+   # true time rectangles
+   plot_detection(
+     reference = lbh_reference[-14, ],
+     detection = lbh_reference[-1, ]
+   )
+ 
+   # use position to make reference and anotations overlap vertically
+   plot_detection(
+     reference = lbh_reference[-14, ],
+     detection = lbh_reference[-1, ], positions = c(1, 1.4)
+   )
+ 
+   # modified using ggplot
+   gg_pd <- plot_detection(
+     reference = lbh_reference[-14, ],
+     detection = lbh_reference[-1, ], positions = c(1, 1.4)
+   )
+ 
+   gg_pd + ggplot2::theme_classic(base_size = 25)
+ }
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot_detection", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("split_acoustic_data")
> ### * split_acoustic_data
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: split_acoustic_data
> ### Title: Splits sound files and associated annotations
> ### Aliases: split_acoustic_data
> 
> ### ** Examples
> 
> {
+   # load data and save to temporary working directory
+   data("lbh1", "lbh2")
+   tuneR::writeWave(lbh1, file.path(tempdir(), "lbh1.wav"))
+   tuneR::writeWave(lbh2, file.path(tempdir(), "lbh2.wav"))
+ 
+   # split files in 1 s files
+   split_acoustic_data(sgmt.dur = 1, path = tempdir())
+ 
+   # Check this folder
+   tempdir()
+ }
[1] "/tmp/RtmpqODukF/working_dir/RtmpMoht72"
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("split_acoustic_data", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("summarize_acoustic_data")
> ### * summarize_acoustic_data
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: summarize_acoustic_data
> ### Title: Summarize information about file format in an acoustic data set
> ### Aliases: summarize_acoustic_data
> 
> ### ** Examples
> 
> {
+   # load data and save example files into temporary working directory
+   data("lbh1", "lbh2", "lbh_reference")
+   tuneR::writeWave(lbh1, file.path(tempdir(), "lbh1.wav"))
+   tuneR::writeWave(lbh2, file.path(tempdir(), "lbh2.wav"))
+ 
+   # summary across sound files
+   summarize_acoustic_data(path = tempdir())
+ }
Features of the acoustic data set in '/tmp/RtmpqODukF/working_dir/RtmpMoht72':

* 14 sound files

* 2 file format(s) (.flac (2); .wav (12))

* 1 sampling rate(s) (22.05 kHz (14))

* 1 bit depth(s) (16 bits (14))

* 1 number of channels (1 channel(s) (14))

* File duration range: 1-5 s (mean: 2.14 s)

* File size range: 0.04-0.22 MB (mean: 0.09 MB)

 (detailed information by sound file can be obtained with 'warbleR::info_sound_files()')
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("summarize_acoustic_data", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("summarize_diagnostic")
> ### * summarize_diagnostic
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: summarize_diagnostic
> ### Title: Summarize detection diagnostics
> ### Aliases: summarize_diagnostic
> 
> ### ** Examples
> 
> {
+   # load example selection tables
+ 
+   data("lbh_reference")
+ 
+   # run diagnose_detection() by sound file
+   diag <- diagnose_detection(
+     reference = lbh_reference,
+     detection = lbh_reference[-1, ], by.sound.file = TRUE
+   )
+ 
+   # summarize
+   summarize_diagnostic(diagnostic = diag)
+ 
+   # should be the same as this:
+   diagnose_detection(
+     reference = lbh_reference,
+     detection = lbh_reference[-1, ], by.sound.file = FALSE
+   )
+ }
  detections true.positives false.positives false.negatives splits merges
1         18             18               0               1      0      0
  overlap    recall precision  f.score
1       1 0.9473684         1 0.972973
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("summarize_diagnostic", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("summarize_reference")
> ### * summarize_reference
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: summarize_reference
> ### Title: Summarize temporal and frequency dimensions of annotations and
> ###   gaps
> ### Aliases: summarize_reference
> 
> ### ** Examples
> 
> {
+   # load data and save example files into temporary working directory
+   data("lbh1", "lbh2", "lbh_reference")
+   tuneR::writeWave(lbh1, file.path(tempdir(), "lbh1.wav"))
+   tuneR::writeWave(lbh2, file.path(tempdir(), "lbh2.wav"))
+ 
+   # summary across sound files
+   summarize_reference(reference = lbh_reference, path = tempdir())
+ 
+   # summary across sound files
+   summarize_reference(reference = lbh_reference, by.sound.file = TRUE, path = tempdir())
+ }
  sound.files min.sel.duration mean.sel.duration max.sel.duration
1    lbh2.wav           117.96            131.45           139.08
2    lbh1.wav           140.84            152.64           163.73
  min.gap.duration mean.gap.duration max.gap.duration annotations
1           406.68            446.09           484.14           9
2           322.16            352.29           514.08          10
  min.bottom.freq mean.bottom.freq max.bottom.freq min.top.freq mean.top.freq
1            2.16             2.27            2.37         8.49          8.82
2            1.81             1.96            2.09         8.49          8.82
  max.top.freq duty.cycle min.peak.amplitude mean.peak.amplitude
1         9.08       0.24              73.76               76.01
2         9.53       0.31              85.21               86.60
  max.peak.amplitude
1              77.65
2              88.03
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("summarize_reference", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("template_correlator")
> ### * template_correlator
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: template_correlator
> ### Title: Acoustic templates correlator using time-frequency
> ###   cross-correlation
> ### Aliases: template_correlator
> 
> ### ** Examples
> 
> {
+   # load example data
+   data("lbh1", "lbh2", "lbh_reference")
+ 
+   # save sound files
+   tuneR::writeWave(lbh1, file.path(tempdir(), "lbh1.wav"))
+   tuneR::writeWave(lbh2, file.path(tempdir(), "lbh2.wav"))
+ 
+   # create template
+   templ <- lbh_reference[4, ]
+   templ2 <- warbleR::selection_table(templ,
+     extended = TRUE, confirm.extended = FALSE,
+     path = tempdir()
+   )
+ 
+   # fourier spectrogram
+   (tc_fr <- template_correlator(templates = templ, path = tempdir(), type = "fourier"))
+ 
+   # mel auditory spectrograms
+   (tc_ma <- template_correlator(templates = templ, path = tempdir(), type = "mel-auditory"))
+ 
+   # mfcc spectrograms
+   (tc_mfcc <- template_correlator(templates = templ, path = tempdir(), type = "mfcc"))
+ 
+   # similar results (but no exactly the same) are found with the 3 methods
+   # these are the correlation of the correlation vectors
+   # fourier vs mel-auditory
+   cor(
+     tc_fr$`lbh2.wav-4/lbh2.wav`$correlation.scores,
+     tc_ma$`lbh2.wav-4/lbh2.wav`$correlation.scores
+   )
+ 
+   # fourier vs mfcc
+   cor(
+     tc_fr$`lbh2.wav-4/lbh2.wav`$correlation.scores,
+     tc_mfcc$`lbh2.wav-4/lbh2.wav`$correlation.scores
+   )
+ 
+   # mel-auditory vs mfcc
+   cor(
+     tc_ma$`lbh2.wav-4/lbh2.wav`$correlation.scores,
+     tc_mfcc$`lbh2.wav-4/lbh2.wav`$correlation.scores
+   )
+ 
+   # using an extended selection table
+   templ_est <- warbleR::selection_table(templ,
+     extended = TRUE, confirm.extended = FALSE,
+     path = tempdir()
+   )
+ 
+   tc_fr_est <- template_correlator(templates = templ_est, path = tempdir(), type = "fourier")
+ 
+   # produces the same result as templates in a regular data frame
+   cor(
+     tc_fr$`lbh2.wav-4/lbh2.wav`$correlation.scores,
+     tc_fr_est$`lbh2.wav_4-1/lbh2.wav`$correlation.scores
+   )
+ }
checking selections (step 1 of 2):
saving wave objects into extended selection table (step 2 of 2):
checking selections (step 1 of 2):
saving wave objects into extended selection table (step 2 of 2):
[1] 1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("template_correlator", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("template_detector")
> ### * template_detector
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: template_detector
> ### Title: Acoustic template detection from time-frequency
> ###   cross-correlations
> ### Aliases: template_detector
> 
> ### ** Examples
> 
> {
+   # load example data
+   data("lbh1", "lbh2", "lbh_reference")
+ 
+   # save sound files
+   tuneR::writeWave(lbh1, file.path(tempdir(), "lbh1.wav"))
+   tuneR::writeWave(lbh2, file.path(tempdir(), "lbh2.wav"))
+ 
+   # template for the first sound file in 'lbh_reference'
+   templ1 <- lbh_reference[1, ]
+ 
+   # generate template correlations
+   tc <- template_correlator(templates = templ1, path = tempdir(), files = "lbh1.wav")
+ 
+   # template detection
+   td <- template_detector(template.correlations = tc, threshold = 0.4)
+ 
+   # diagnose detection
+   diagnose_detection(
+     reference =
+       lbh_reference[lbh_reference$sound.files == "lbh1.wav", ],
+     detection = td
+   )
+ 
+   # template for the second and third sound file in 'lbh_reference'
+   # which have similar song types
+   templ2 <- lbh_reference[4, ]
+ 
+   # generate template correlations
+   tc <- template_correlator(
+     templates = templ2, path = tempdir(),
+     files = c("lbh1.wav", "lbh2.wav")
+   )
+ 
+   # template detection
+   td <- template_detector(template.correlations = tc, threshold = 0.3)
+ 
+   # diagnose detection
+   diagnose_detection(reference = lbh_reference, detection = td)
+ }
  detections true.positives false.positives false.negatives splits merges
1         77             19              58               0     12      0
    overlap recall precision   f.score
1 0.8606319      1 0.2467532 0.3958333
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("template_detector", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  34.878 0.303 36.027 0.39 0.112 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
