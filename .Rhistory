optimize_template_detector(
template.correlations = tc,
reference = lbh_reference,
threshold = c(0.2, 0.5, 0.6)
)
unlink(
list.files(
path = tempdir(),
pattern = "\\.wav$|\\.flac$|\\.mp3$|\\.wac$",
ignore.case = T,
full.names = TRUE
)
)
expect_s3_class(otp, 'data.frame')
expect_equal(nrow(otp), 6)
expect_true(all(otp$f.score > 0.64))
})
data(lbh2, package = "ohun")
data(lbh_reference, package = "ohun")
#save sound files
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = FALSE)
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = FALSE)
# template for the fourth sound file in 'lbh_reference'
# generate template correlations
tc <-
template_correlator(templates = lbh_reference[c(1, 11),], path = tempdir())
# using 2 threshold
otp <-
optimize_template_detector(
template.correlations = tc,
reference = lbh_reference,
threshold = c(0.2, 0.5, 0.6)
)
unlink(
list.files(
path = tempdir(),
pattern = "\\.wav$|\\.flac$|\\.mp3$|\\.wac$",
ignore.case = T,
full.names = TRUE
)
)
expect_s3_class(otp, 'data.frame')
expect_equal(nrow(otp), 6)
expect_true(all(otp$f.score > 0.64))
otp$f.score
test_that("1 template", {
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
data(lbh_reference, package = "ohun")
#save sound files
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = FALSE)
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = FALSE)
# template for the fourth sound file in 'lbh_reference'
# generate template correlations
tc <-
template_correlator(templates = lbh_reference[11,], path = tempdir())
# using 2 threshold
otp <-
optimize_template_detector(
template.correlations = tc,
reference = lbh_reference,
threshold = c(0.2, 0.5, 0.6)
)
expect_s3_class(otp, 'data.frame')
expect_equal(nrow(otp), 3)
expect_true(all(otp$f.score > 0.28))
})
test_that("2 templates", {
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
data(lbh_reference, package = "ohun")
#save sound files
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = FALSE)
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = FALSE)
# template for the fourth sound file in 'lbh_reference'
# generate template correlations
tc <-
template_correlator(templates = lbh_reference[c(1, 11),], path = tempdir())
# using 2 threshold
otp <-
optimize_template_detector(
template.correlations = tc,
reference = lbh_reference,
threshold = c(0.2, 0.5, 0.6)
)
unlink(
list.files(
path = tempdir(),
pattern = "\\.wav$|\\.flac$|\\.mp3$|\\.wac$",
ignore.case = T,
full.names = TRUE
)
)
expect_s3_class(otp, 'data.frame')
expect_equal(nrow(otp), 6)
expect_true(all(otp$f.score > 0.27))
})
devtools::test()
oed
expect_class(oed, "data.frame")
test_that("plot and null", {
data(list = "lbh1", "lbh_reference")
disp_label_spectro <- function() label_spectro(wave = lbh1,
detection = lbh_reference[lbh_reference$sound.files == "lbh1.wav", ],
wl = 200, ovlp = 50, flim = c(1, 10))
vdiffr::expect_doppelganger("get_templates", disp_label_spectro)
disp_label_spectro_env <- function() label_spectro(wave = lbh1,
detection = lbh_reference[lbh_reference$sound.files == "lbh1.wav", ],
wl = 200, ovlp = 50, flim = c(1, 10), envelope = TRUE)
vdiffr::expect_doppelganger("get_templates_env", disp_label_spectro_env)
})
devtools::test()
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
devtools::test()
detec1 <-
energy_detector(
files = c("lbh1.wav", "lbh2.wav"),
path = tempdir(),
threshold = 0.06,
hop.size = 6.8,
bp = c(2, 9),
min.duration = 0.09,
smooth = 10,
peak.amplitude = 10,
pb = FALSE
)
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
data(lbh_reference, package = "ohun")
#save sound files
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = FALSE)
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = FALSE)
detec1 <-
energy_detector(
files = c("lbh1.wav", "lbh2.wav"),
path = tempdir(),
threshold = 0.06,
hop.size = 6.8,
bp = c(2, 9),
min.duration = 0.09,
smooth = 10,
peak.amplitude = 10,
pb = FALSE
)
expect_class(detec1, "data.frame")
expect_class(detec1, "selection_table")
expect_equal(nrow(detec1), 17)
expect_equal(nrow(detec1), 12)
test_that("peak amplitude works", {
detec1 <-
energy_detector(
files = c("lbh1.wav", "lbh2.wav"),
path = tempdir(),
threshold = 0.06,
hop.size = 6.8,
bp = c(2, 9),
min.duration = 0.09,
smooth = 10,
peak.amplitude = 10,
pb = FALSE
)
expect_class(detec1, "data.frame")
expect_class(detec1, "selection_table")
expect_equal(nrow(detec1), 12)
})
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
data(lbh_reference, package = "ohun")
#save sound files
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = FALSE)
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = FALSE)
test_that("peak amplitude works", {
detec1 <-
energy_detector(
files = c("lbh1.wav", "lbh2.wav"),
path = tempdir(),
threshold = 0.06,
hop.size = 6.8,
bp = c(2, 9),
min.duration = 0.09,
smooth = 10,
peak.amplitude = 10,
pb = FALSE
)
expect_class(detec1, "data.frame")
expect_class(detec1, "selection_table")
expect_equal(nrow(detec1), 12)
})
test_that("time diagnostics", {
# diagnose detection
detec1 <-
energy_detector(
files = c("lbh1.wav", "lbh2.wav"),
path = tempdir(),
threshold = 0.06,
hop.size = 6.8,
bp = c(2, 9),
min.duration = 0.09,
smooth = 10,
peak.amplitude = 80,
pb = FALSE
)
expect_class(detec1, "data.frame")
expect_class(detec1, "selection_table")
expect_equal(nrow(detec1), 17)
})
# diagnose detection
detec1 <-
energy_detector(
files = c("lbh1.wav", "lbh2.wav"),
path = tempdir(),
threshold = 0.06,
hop.size = 6.8,
bp = c(2, 9),
min.duration = 0.09,
smooth = 10,
peak.amplitude = 80,
pb = FALSE
)
expect_class(detec1, "data.frame")
expect_class(detec1, "selection_table")
expect_equal(nrow(detec1), 17)
expect_equal(nrow(detec1), 13)
expect_equal(nrow(detec1), 10)
# diagnose detection
detec1 <-
energy_detector(
files = c("lbh1.wav", "lbh2.wav"),
path = tempdir(),
threshold = 0.06,
hop.size = 6.8,
bp = c(2, 9),
min.duration = 0.09,
smooth = 10,
peak.amplitude = 80,
pb = FALSE
)
expect_class(detec1, "data.frame")
expect_class(detec1, "selection_table")
nrow(detec1)
expect_equal(nrow(detec1), 3)
# using smoothing and minimum duration
detec1 <- energy_detector(
path = tempdir(),
threshold = 0.07,
bp = c(2, 9),
hop.size = 6.8,
min.duration = 0.09,
smooth = 7,
pb = FALSE
)
expect_class(detec1, "data.frame")
expect_class(detec1, "selection_table")
expect_equal(nrow(detec1), 14)
nrow(detec1)
detec2 <-
energy_detector(
files = c("lbh1.wav", "lbh2.wav"),
threshold = 0.10,
hold.time = 0.15,
bp = c(2, 9),
hop.size = 6.8,
path = tempdir(),
pb = FALSE
)
expect_class(detec1, "data.frame")
expect_class(detec1, "selection_table")
expect_equal(nrow(detec2), 4)
envs <- get_envelopes(
files = c("lbh1.wav", "lbh2.wav"),
bp = c(2, 9),
hop.size = 6.8,
path = tempdir()
)
detec <-
energy_detector(
envelopes = envs,
threshold = 0.10,
hold.time = 0.15,
min.duration = 0.05,
pb = FALSE
)
expect_equal(nrow(detec), 4)
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
data(lbh_reference, package = "ohun")
#save sound files
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = FALSE)
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = FALSE)
test_that("peak amplitude works", {
detec1 <-
energy_detector(
files = c("lbh1.wav", "lbh2.wav"),
path = tempdir(),
threshold = 0.06,
hop.size = 6.8,
bp = c(2, 9),
min.duration = 0.09,
smooth = 10,
peak.amplitude = 10,
pb = FALSE
)
expect_class(detec1, "data.frame")
expect_class(detec1, "selection_table")
expect_equal(nrow(detec1), 12)
})
test_that("time diagnostics", {
# diagnose detection
detec1 <-
energy_detector(
files = c("lbh1.wav", "lbh2.wav"),
path = tempdir(),
threshold = 0.06,
hop.size = 6.8,
bp = c(2, 9),
min.duration = 0.09,
smooth = 10,
peak.amplitude = 80,
pb = FALSE
)
expect_class(detec1, "data.frame")
expect_class(detec1, "selection_table")
expect_equal(nrow(detec1), 3)
})
test_that("using smoothing and minimum duration", {
# using smoothing and minimum duration
detec1 <- energy_detector(
path = tempdir(),
threshold = 0.07,
bp = c(2, 9),
hop.size = 6.8,
min.duration = 0.09,
smooth = 7,
pb = FALSE
)
expect_class(detec1, "data.frame")
expect_class(detec1, "selection_table")
expect_equal(nrow(detec1), 9)
})
test_that("using hold time", {
detec2 <-
energy_detector(
files = c("lbh1.wav", "lbh2.wav"),
threshold = 0.10,
hold.time = 0.15,
bp = c(2, 9),
hop.size = 6.8,
path = tempdir(),
pb = FALSE
)
expect_class(detec1, "data.frame")
expect_class(detec1, "selection_table")
expect_equal(nrow(detec2), 4)
})
test_that("calculate envelopes first", {
envs <- get_envelopes(
files = c("lbh1.wav", "lbh2.wav"),
bp = c(2, 9),
hop.size = 6.8,
path = tempdir()
)
detec <-
energy_detector(
envelopes = envs,
threshold = 0.10,
hold.time = 0.15,
min.duration = 0.05,
pb = FALSE
)
expect_equal(nrow(detec), 4)
})
skip_if_windows <- function() {
if (Sys.info()[1] == "Windows") {
skip('Skipping on Windows')
}
}
# until flac2wav function is updated
# test_that("convert files to flac", {
#   skip_if_windows()
#
# wav_2_flac(path = tempdir())
#
#   # change sound file extension to flac
#   flac_reference <- lbh_reference
#   flac_reference$sound.files <-
#     gsub(".wav", ".flac", flac_reference$sound.files)
#
#
#   detec4 <-
#     energy_detector(
#       files = c("lbh1.flac", "lbh2.flac"),
#       path = tempdir(),
#       threshold = 0.06,
#       smooth = 6.8,
#       bp = c(2, 9),
#       hop.size = 6.8,
#       min.duration = 0.09,
#       pb = FALSE
#     )
#
#   unlink(
#     list.files(
#       path = tempdir(),
#       pattern = "\\.wav$|\\.flac$|\\.mp3$|\\.wac$",
#       ignore.case = T,
#       full.names = TRUE
#     )
#   )
#
#   expect_equal(nrow(detec4), 8)
#
# })
devtools::test()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
devtools::test()
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
devtools::test()
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
library(sketchy)
make_compendium(name = "phaeochroa_heterospecific_imitation", path = "~/Dropbox/Projects/", format = "sketchy", git = T, readme = T, Rproj = T)
# build tar.gz package file
system("R CMD build ./ --resave-data=best")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = TRUE, manual = TRUE)
devtools::test()
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
usethis::use_github_action("pkgdown")
