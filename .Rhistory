})
# generate ggplot object
gg_obj <- ggplot(datp, aes(x = x, y = .type, fill = .type)) +
geom_polygon(aes(x = x, y = y, group = id)) +
facet_grid(sound.files~.) +
labs(x= "Time (s)", y = "") +
theme(axis.text.y=element_blank(), axis.ticks.y=element_blank())
gg_obj
# make type a factor to order position of reference and detection
dat$.type <- factor(dat$.type, levels = c("detection", "reference"))
# add mid time
dat$time <- dat$start + ((dat$end - dat$start) / 2)
# generate ggplot object
gg_obj <- ggplot(data = dat, aes(x = time, y = .type, color = .type)) +
geom_point(size = 20, shape = 124, show.legend = FALSE) +
scale_color_manual(values = c("#482878B3" , "#35B779B3")) +
facet_grid(sound.files~.) +
labs(x= "Time (s)", y = "")
gg_obj
# generate ggplot object
gg_obj <- ggplot(datp, aes(x = x, y = .type, fill = .type)) +
geom_polygon(aes(x = x, y = y, group = id)) +
facet_grid(sound.files~.) +
labs(x= "Time (s)", y = "") +
scale_fill_manual(values = c("#482878B3" , "#35B779B3")) +
theme(axis.text.y=element_blank(), axis.ticks.y=element_blank())
gg_obj
# generate ggplot object
gg_obj <- ggplot(datp, aes(x = x, y = .type, fill = .type)) +
geom_polygon(aes(x = x, y = y, group = id)) +
facet_grid(sound.files~.) +
labs(x= "Time (s)", y = "") +
scale_fill_manual(values = c("#482878B3" , "#35B779B3")) +
scale_y_discrete(labels=c("1" = "Reference",
"2" = "Detection"))
gg_obj
# generate ggplot object
gg_obj <- ggplot(datp, aes(x = x, y = .type, fill = .type)) +
geom_polygon(aes(x = x, y = y, group = id)) +
facet_grid(sound.files~.) +
labs(x= "Time (s)", y = "") +
scale_fill_manual(values = c("#482878B3" , "#35B779B3")) +
scale_y_continuous(labels=c("1" = "Reference",
"2" = "Detection"))
gg_obj
# generate ggplot object
gg_obj <- ggplot(datp, aes(x = x, y = .type, fill = .type)) +
geom_polygon(aes(x = x, y = y, group = id)) +
facet_grid(sound.files~.) +
labs(x= "Time (s)", y = "") +
scale_fill_manual(values = c("#482878B3" , "#35B779B3")) +
scale_y_continuous(breaks = c(1, 2), labels=c("Reference", "Detection"))
gg_obj
viridis(10, alpha = 0.5)
corner_positions <- c(-0.25, -0.25, 0.25, 0.25) + positions
positions = c(1, 2)
corner_positions <- c(-0.25, -0.25, 0.25, 0.25) + positions
corner_positions
corner_positions <- c(-0.25, -0.25, 0.25, 0.25) + rep(positions, each = 4)
corner_positions
source("~/Dropbox/R_package_testing/ohun/R/plot_detection.R")
source("~/Dropbox/R_package_testing/ohun/R/plot_detection.R")
# add x and y coordinates for each corner of the polygon representing the sound
xy_dat_list <- lapply(unique(dat$id), function(x){
X <- dat[dat$id == x, ]
X2 <- X[rep(1, 4), ]
X2$x <- c(X$start, X$end, X$end, X$start)
X2$y <- if(X$.type == "reference") corner_positions[1:4] else
corner_positions[5:8]
return(X2)
})
# combine in a single data frame
xy_dat_list <- do.call(rbind, xy_dat_list)
# generate ggplot object
gg_obj <- ggplot(datp, aes(x = x, y = .type, fill = .type)) +
geom_polygon(aes(x = x, y = y, group = id)) +
facet_grid(sound.files~.) +
labs(x= "Time (s)", y = "") +
scale_fill_manual(values = c("#48287880" , "#35B77980")) +
scale_y_continuous(breaks = c(1, 2), labels=c("Reference", "Detection"))
gg_obj
source("~/Dropbox/R_package_testing/ohun/R/plot_detection.R")
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ])
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ])
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = TRUE)
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = FALSE)
source("~/Dropbox/R_package_testing/ohun/R/plot_detection.R")
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = FALSE)
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = TRUE)
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = FALSE)
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = FALSE, positions = c(1, 1.5))
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = FALSE, positions = c(1, 1.5))
source("~/Dropbox/R_package_testing/ohun/R/plot_detection.R")
source("~/Dropbox/R_package_testing/ohun/R/plot_detection.R")
source("~/Dropbox/R_package_testing/ohun/R/plot_detection.R")
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = FALSE, positions = c(1, 1.5))
corner_positions
positions = c(1, 1.5)
# add column to ID observations from each input data set
reference$.type <- "reference"
detection$.type <- "detection"
# bind data sets
common_cols <- intersect(names(reference), names(detection))
dat <- rbind(as.data.frame(reference[ , common_cols]), as.data.frame(detection[ , common_cols]))
# make type a factor to order position of reference and detection
dat$.type <- factor(dat$.type, levels = c("detection", "reference"))
if (mid.point){
# add mid time
dat$time <- dat$start + ((dat$end - dat$start) / 2)
# generate ggplot object
gg_obj <- ggplot(data = dat, aes(x = time, y = .type, color = .type)) +
geom_point(size = 20, shape = 124, show.legend = FALSE) +
scale_color_manual(values = c("#482878B3" , "#35B779B3")) +
facet_grid(sound.files~.) +
labs(x= "Time (s)", y = "")
} else {
# create a unique ID for each row
dat$id <- paste(dat$sound.files, dat$selec, dat$.type, sep = "-")
corner_positions <- c(-0.25, -0.25, 0.25, 0.25) + rep(positions, each = 4)
# add x and y coordinates for each corner of the polygon representing the sound
xy_dat_list <- lapply(unique(dat$id), function(x){
X <- dat[dat$id == x, ]
X2 <- X[rep(1, 4), ]
X2$x <- c(X$start, X$end, X$end, X$start)
X2$y <- if(X$.type == "reference") corner_positions[1:4] else
corner_positions[5:8]
return(X2)
})
# combine in a single data frame
xy_dat_list <- do.call(rbind, xy_dat_list)
# generate ggplot object
gg_obj <- ggplot(datp, aes(x = x, y = .type, fill = .type)) +
geom_polygon(aes(x = x, y = y, group = id), show.legend = FALSE) +
facet_grid(sound.files~.) +
labs(x= "Time (s)", y = "") +
scale_fill_manual(values = c("#48287880" , "#35B77980")) +
scale_y_continuous(breaks = positions, labels=c("Reference", "Detection"))
}
mid.point = FALSE
# create a unique ID for each row
dat$id <- paste(dat$sound.files, dat$selec, dat$.type, sep = "-")
corner_positions <- c(-0.25, -0.25, 0.25, 0.25) + rep(positions, each = 4)
corner_positions
corner_positions[1:4]
corner_positions[5:8]
corner_positions <- c(-0.25, -0.25, 0.25, 0.25) + rep(positions, each = 4)
# add x and y coordinates for each corner of the polygon representing the sound
xy_dat_list <- lapply(unique(dat$id), function(x){
X <- dat[dat$id == x, ]
X2 <- X[rep(1, 4), ]
X2$x <- c(X$start, X$end, X$end, X$start)
X2$y <- if(X$.type == "reference") corner_positions[1:4] else
corner_positions[5:8]
return(X2)
})
# combine in a single data frame
xy_dat_list <- do.call(rbind, xy_dat_list)
xy_dat_list
# generate ggplot object
gg_obj <- ggplot(xy_dat, aes(x = x, y = .type, fill = .type)) +
geom_polygon(aes(x = x, y = y, group = id), show.legend = FALSE) +
facet_grid(sound.files~.) +
labs(x= "Time (s)", y = "") +
scale_fill_manual(values = c("#48287880" , "#35B77980")) +
scale_y_continuous(breaks = positions, labels=c("Reference", "Detection"))
# add x and y coordinates for each corner of the polygon representing the sound
xy_dat_list <- lapply(unique(dat$id), function(x){
X <- dat[dat$id == x, ]
X2 <- X[rep(1, 4), ]
X2$x <- c(X$start, X$end, X$end, X$start)
X2$y <- if(X$.type == "reference") corner_positions[1:4] else
corner_positions[5:8]
return(X2)
})
# combine in a single data frame
xy_dat <- do.call(rbind, xy_dat_list)
# generate ggplot object
gg_obj <- ggplot(xy_dat, aes(x = x, y = .type, fill = .type)) +
geom_polygon(aes(x = x, y = y, group = id), show.legend = FALSE) +
facet_grid(sound.files~.) +
labs(x= "Time (s)", y = "") +
scale_fill_manual(values = c("#48287880" , "#35B77980")) +
scale_y_continuous(breaks = positions, labels=c("Reference", "Detection"))
gg_obj
source("~/Dropbox/R_package_testing/ohun/R/plot_detection.R")
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = FALSE, positions = c(1, 1.5))
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = FALSE, positions = c(1, 1.4))
ref <- lbh_reference[-1, ]
det <- lbh_reference[-1, ]
det$start <- det$start + 0.05
plot_detection(reference = lbh_reference[-14, ], detection = det, mid.point = FALSE, positions = c(1, 1.4))
det <- lbh_reference[-1, ]
det$start <- det$start + 0.05
det$end <- det$end + 0.05
plot_detection(reference = lbh_reference[-14, ], detection = det, mid.point = FALSE, positions = c(1, 1.4))
plot_detection(reference = lbh_reference[-14, ], detection = det, mid.point = FALSE, positions = c(-1, -1.4))
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
source("~/Dropbox/R_package_testing/ohun/R/plot_detection.R")
plot_detection(reference = lbh_reference[-14, ], detection = det, mid.point = FALSE, positions = c(-1, -1.4))
plot_detection(reference = lbh_reference[-14, ], detection = det, mid.point = FALSE, positions = c(-1, -1.4, 2))
plot_detection(reference = lbh_reference[-14, ], detection = det, mid.point = 2, positions = c(-1, -1.4))
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
plot_detection(reference = lbh_reference[-14, ], detection = det, mid.point = 2, positions = c(-1, -1.4))
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
plot_detection(reference = lbh_reference[-14, ], detection = det, mid.point = 2, positions = c(-1, -1.4))
plot_detection(reference = lbh_reference[-14, ], detection = det, mid.point = 2, positions = c(-1, -1.4))
plot_detection(reference = lbh_reference[-14, ], detection = det, positions = c(-1, -1.4))
a <- plot_detection(reference = lbh_reference[-14, ], detection = det, positions = c(-1, -1.4))
a + theme_bw(base_size = 25)
source("~/Dropbox/R_package_testing/ohun/R/plot_detection.R")
class(a)
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = TRUE)
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = FALSE)
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = FALSE, positions = c(1, 1.4))
det <- lbh_reference[-1, ]
det$start <- det$start + 0.05
det$end <- det$end + 0.05
a <- plot_detection(reference = lbh_reference[-14, ], detection = det, positions = c(-1, -1.4))
a + theme_bw(base_size = 25)
lbh_reference$sound.files
lbh2 <- lbh_reference
lbh2 <- lbh_reference
lbh2$sound.files <- gsub("lbh1", "lbh3", lbh2$sound.files)
lbh2$sound.files <- gsub("lbh2", "lbh4", lbh2$sound.files)
lbh2 <- rbind(lbh_reference, lbh2)
det <- lbh2[-1, ]
det$start <- det$start + 0.05
det$end <- det$end + 0.05
a <- plot_detection(reference = lbh2[-14, ], detection = det, positions = c(-1, -1.4))
a + theme_bw(base_size = 25)
a + theme_bw(base_size = 12)
source("~/Dropbox/R_package_testing/ohun/R/plot_detection.R")
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = TRUE)
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = FALSE)
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = FALSE, positions = c(1, 1.4))
lbh2 <- lbh_reference
lbh2$sound.files <- gsub("lbh1", "lbh3", lbh2$sound.files)
lbh2$sound.files <- gsub("lbh2", "lbh4", lbh2$sound.files)
lbh2 <- rbind(lbh_reference, lbh2)
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = TRUE)
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = TRUE, size = 5)
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = TRUE, size = 5)
source("~/Dropbox/R_package_testing/ohun/R/plot_detection.R")
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = TRUE, size = 5)
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = TRUE, size = 20)
source("~/Dropbox/R_package_testing/ohun/R/plot_detection.R")
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = TRUE, size = 20)
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = TRUE, size = 40)
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = TRUE, size = 20)
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = FALSE, size = 30)
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = TRUE, size = 30)
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = TRUE, size = 25)
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ])
source("~/Dropbox/R_package_testing/ohun/R/plot_detection.R")
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = TRUE, size = 20)
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = TRUE, size = 25)
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ])
# mid point and larger size
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = TRUE, size = 25)
# true time rectangles
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ])
# use position
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = FALSE, positions = c(1, 1.4))
# use position to make reference and anotations overlap vertically
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], mid.point = FALSE, positions = c(1, 1.4))
# use position to make reference and anotations overlap vertically
plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], positions = c(1, 1.4))
# modified using ggplot
gg_pd <- plot_detection(reference = lbh_reference[-14, ], detection = lbh_reference[-1, ], positions = c(1, 1.4))
gg_pd + theme_classic(base_size = 25)
source("~/Dropbox/R_package_testing/ohun/R/plot_detection.R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
source("~/Dropbox/R_package_testing/ohun/R/ohun-package.R")
source("~/Dropbox/R_package_testing/ohun/R/ohun-package.R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
source("~/Dropbox/R_package_testing/ohun/R/plot_detection.R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
source("~/Dropbox/R_package_testing/ohun/R/plot_detection.R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
source("~/Dropbox/R_package_testing/ohun/R/ohun-package.R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
source("~/Dropbox/R_package_testing/ohun/R/plot_detection.R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# Chunk 3: global options
#load packages
library(ohun)
library(tuneR)
library(warbleR)
load("../data/lbh2.rda")
# Chunk 3: global options
#load packages
library(ohun)
library(tuneR)
library(warbleR)
load("../data/lbh2.rda")
# Chunk 3: global options
#load packages
library(ohun)
library(tuneR)
library(warbleR)
load("./data/lbh2.rda")
load("./data/lbh1.rda")
load("./data/lbh_reference.rda")
# for spectrograms
par(mar = c(5, 4, 2, 2) + 0.1)
stopifnot(require(knitr))
options(width = 90)
opts_chunk$set(
comment = NA,
# eval = if (isTRUE(exists("params"))) params$EVAL else FALSE,
dev = "jpeg",
dpi = 100,
fig.width=10,
out.width = "100%",
fig.align = "center"
)
# Chunk 4
# load example data
data("lbh1", "lbh2", "lbh_reference")
lbh_reference
# Chunk 5
# convert to data frame
as.data.frame(lbh_reference)
# Chunk 6
# save sound file
tuneR::writeWave(lbh1, file.path(tempdir(), "lbh1.wav"))
# save sound file
tuneR::writeWave(lbh2, file.path(tempdir(), "lbh2.wav"))
# print spectrogram
label_spectro(wave = lbh1, reference = lbh_reference[lbh_reference$sound.files == "lbh1.wav", ], hop.size = 10, ovlp = 50, flim = c(1, 10))
# print spectrogram
label_spectro(wave = lbh2, reference = lbh_reference[lbh_reference$sound.files == "lbh2.wav", ], hop.size = 10, ovlp = 50, flim = c(1, 10))
# Chunk 7
lbh1_reference <-
lbh_reference[lbh_reference$sound.files == "lbh1.wav",]
# diagnose
diagnose_detection(reference = lbh1_reference, detection = lbh1_reference)[, c(1:3, 7:9)]
# Chunk 8
# create new table
lbh1_detection <- lbh1_reference[3:9,]
# print spectrogram
label_spectro(
wave = lbh1,
reference = lbh1_reference,
detection = lbh1_detection,
hop.size = 10,
ovlp = 50,
flim = c(1, 10)
)
# diagnose
diagnose_detection(reference = lbh1_reference, detection = lbh1_detection)[, c(1:3, 7:9)]
# ggplot detection and reference
plot_detection(reference = lbh1_reference, detection = lbh1_detection)
# ggplot detection and reference
plot_detection(reference = lbh_reference, detection = lbh_reference)
install()
install()
devtools::install()
remove.packages("ohun")
devtools::install()
# devtools::install()
pkgs <- c("remotes", "devtools", "fftw", "seewave", "pbapply", "RCurl", "rjson", "kableExtra", "knitr", "formatR", "rprojroot", "xaringanExtra" ,"microbenchmark", "pkgdown", "maRce10/warbleR", "covr", "pkgcheck", "visNetwork", "codemetar", "ropensci-review-tools/pkgstats", "ropensci/tic", "checkmate")
# install/ load packages
out <- lapply(pkgs, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  remotes::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
a <- try(require(pkg, character.only = T), silent = T)
if (!a) remove.packages(pkg)
})
rm(list = ls())
# install ctags
# first run in terminal: sudo apt install lsb-core
# then run this with sudo privilege
# ctags_install(bin_dir = NULL, sudo = TRUE)
load_all()
library(ohun)
# install package
remotes::install_github("maRce10/ohun")
