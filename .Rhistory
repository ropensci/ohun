w = w + 1
}
if(fun.only)
{res <- res[!is.na(res)]
return(res)}
}
#replace text
repl.text <- function(pattern, repl, path = "./R", ignore.case = T, file.ext = "\\.R$|\\.Rmd$", recursive = TRUE){
rfiles <- list.files(pattern =file.ext, path = path, full.names = T, all.files = T, ignore.case = ignore.case, recursive = recursive)
for(f in rfiles){
#find and replace
x <- readLines(f)
y <- gsub(pattern, repl, x, fixed = T, ignore.case = ignore.case)
cat(y, file=f, sep="\n")
#reread
x <- readLines(f)
w <- grep(repl, x, fixed = T, value = T, ignore.case = T)
if(length(w)>0) {
print(f)
for(i in w) print(i)
}
}
}
#find functions with specific arguments
find.arg <- function(arg1, arg2 = NULL){
rfiles <- list.files(pattern = "\\.R$", path = "./R", full.names = T, all.files = T)
funs <- gsub(pattern = "\\.R", "", (basename(rfiles)))
funs <-grep("zzz|data|package", funs, invert = T, value = T)
l1 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg1, a))) return(x)
}      ))
if(!is.null(arg2))
{l2 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg2, a))) return(x)
}      ))
res <- intersect(l1, l2)
} else res <- l1
return(res)
}
# run default arguments
run.def.args2 <-function(FUN)
{
fm <- formals(FUN)
fm <- fm[sapply(fm, length) > 0 | sapply(fm, is.null)]
fm <- lapply(1:length(fm), function(x) paste(names(fm)[x], "=", fm[x]))
for(i in fm) try(eval(parse(text = i)), silent = T)
}
#find functions with specific arguments and text
find.arg.text <- function(arg1, arg2 = NULL, pattern) {
f1 <- find.text(pattern = pattern, fun.only = T)
f2 <- find.arg(arg1 = arg1, arg2 = arg2)
return(intersect(f1, f2))
}
#bid data set
big.seltab <- function(X, nrow = 100){
Y <- X[rep(1:nrow(X), ceiling(nrow/nrow(X)))[1:nrow],]
Y$selec <- 1:nrow(Y)
if(is_selection_table(Y) | is_extended_selection_table(Y))
attr(Y, "check.results") <- attr(X, "check.results")[rep(1:nrow(attr(X, "check.results")), ceiling(nrow/nrow(attr(X, "check.results"))))[1:nrow],]
attr(Y, "check.results")$selec <- 1:nrow(Y)
return(Y)
}
#write all wav files in lbh_selec_table
write.sound.files <- function(path = tempdir(), extensible = T, other.formats = FALSE, simulated = FALSE){
# setwd(path)
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = extensible) #save sound files
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = extensible) #save sound files
if (simulated){
# Creating vector for duration
durs <- rep(c(0.3, 1), 5)
# Creating simulated song
set.seed(12)
simulated_1 <- warbleR::simulate_songs(n = 10, durs = durs, freqs = 5, sig2 = 0.01, gaps = 0.5, harms = 1, bgn = 0.1, path = tempdir(), file.name = "simulated_1", selec.table = TRUE, shape = "cos", fin = 0.3, fout = 0.35, samp.rate = 18)
sim_2 <- sim_songs(n = 10, durs = durs, freqs = 5, sig2 = 0.01, gaps = 0.5, harms = 1, bgn = 0.1, path = tempdir(), file.name = "simulated_2", selec.table = TRUE, shape = "cos", fin = 0.3, fout = 0.35, samp.rate = 18, am.amps = c(1, 2, 3, 2, 0.1, 2, 3, 3, 2, 1))
sel_tab2 <- sel_tab1 <- simulated_1$selec.table
sel_tab2$sound.files <- gsub("_1", "_2", sel_tab2$sound.files)
sel_tab <- rbind(sel_tab1, sel_tab2)
return(sel_tab)
}
# if (other.formats){
#   file.copy(from = system.file("extdata", "recording_20170716_230503.wac", package = "bioacoustics"), to = file.path(tempdir(), "recording_20170716_230503.wac"))
#
# file.copy(from = "../Phae.long4.mp3", to = file.path(tempdir(),  "Phae.long4.mp3"))
#
#   file.copy(from = file.path(tempdir(), "Phae.long1.wav"), to = file.path(tempdir(), "Phae.long5.wav"))
#
# wav2flac(file.path(tempdir(), "Phae.long5.wav"))
#
# if (selection.table){
#
#   lbh_selec_table$sound.files <- as.character(lbh_selec_table$sound.files)
#
#   sub_tab <- lbh_selec_table[lbh_selec_table$sound.files %in% c("Phae.long1.wav", "Phae.long4.wav"), 1:7]
#
#   sub_tab$sound.files[sub_tab$sound.files == "Phae.long1.wav"] <- "Phae.long5.flac"
#
#     sub_tab$sound.files[sub_tab$sound.files == "Phae.long4.wav"] <- "Phae.long4.mp3"
#
#     # fix times
#      sub_tab$start[sub_tab$sound.files == "Phae.long4.mp3"] <- c(0.2085945, 1.5950019, 2.3057996)
#
#      sub_tab$end[sub_tab$sound.files == "Phae.long4.mp3"] <- c(0.3528653, 1.7287163, 2.4289576)
#
#
#     sub_tab <- rbind(sub_tab, data.frame(sound.files = "recording_20170716_230503.wac", channel = 1, selec = 1, start = 0.1, end = 0.3, bottom.freq = 2, top.freq = 10))
#
#     sub_tab <- rbind(sub_tab, lbh_selec_table[, 1:7])
#
#     sub_tab$format <-ifelse(grepl("flac$", sub_tab$sound.files), "flac", ifelse(grepl("mp3$", sub_tab$sound.files), "mp3", "wav"))
#
#
#     return(sub_tab)
# } else return(NULL)
# }
}
# run all warbleR fuctions
run.all <- function() invisible(lapply(list.files(pattern = "\\.R", path = "./R", full.names = T, all.files = T), function(x) try(source(x), silent = T)))
# run.all()
list.selection.table <- function(lbh_selec_table, path = tempdir())
{
crr.dr <- getwd()
on.exit(setwd(crr.dr))
if(!is.null(path)) setwd(path)
Xlist <- list()
Xlist$Xdf <- lbh_selec_table
Xlist$Xst <- selection_table(lbh_selec_table)
Xlist$Xest <- selection_table(lbh_selec_table, extended = T, confirm.extended = F)
lbh_selec_table$song <- as.numeric(lbh_selec_table$sound.files)
Xlist$Xestbs <- selection_table(X = lbh_selec_table, extended = T, by.song = "song", confirm.extended = F)
names(Xlist) <- c("DATA.FRAME", "SELECTION_TABLE", "EXTENDED_SELECTION_TABLE", "by.song.EXTENDED_SELECTION_TABLE")
return(Xlist)
}
bi_mats <- function(X, labels) {
# create empty matrix to store memebership matrix
mat <- matrix(nrow = ncol(X), ncol = ncol(X))
# add labels to row and col names
rownames(mat) <- colnames(mat) <- labels
# add 0 if same lek and 1 if else
out <- lapply(1:(length(labels) - 1), function(i){
sapply((i + 1):length(labels), function(j)
if (labels[i] == labels[j]) 0 else 1)
})
# add to mat
mat[lower.tri(mat)] <- unlist(out)
# retunr as distance matrix
return(as.dist(mat))
}
plot_detection <- function(reference, detection, lwd = 90, sep = 1, labels = detection$selec){
if (!is.null(detection$detection.class)){
labels <- ifelse(detection$detection.class == "true.positive", "\nTP", ifelse(detection$detection.class == "false.positive", "\nFP", ifelse(detection$detection.class == "false.negative", "\nFN", ifelse(detection$detection.class == "true.positive (split)", "\nTPs", ifelse(detection$detection.class == "true.positive (merged)", "\nTPm", ifelse(detection$detection.class == "negative (split)", "\nNs", ifelse(detection$detection.class == "negative (merged)", "\nNm", ifelse(detection$detection.class == "negative (split/merged)", "\nNsm", "\nTPsm"))))))))
detection$labels <- paste0(detection$selec, labels)
} else detection$labels <- detection$selec
old_par <- par()
old_par <- old_par[!names(old_par) %in%  c("cin", "cra", "csi", "cxy", "din", "page")]
on.exit(par(old_par))
par(mar = rep(0, 4))
n_sound.files <- length(unique(c(reference$sound.files, detection$sound.files)))
if (n_sound.files > 1)
par(mfrow = c(n_sound.files, 1))
for (e in unique(c(detection$sound.files, reference$sound.files))){
sub_detec <- detection[detection$sound.files == e, ]
sub_ref <- reference[reference$sound.files == e, ]
plot(x = range(c(sub_detec$start, sub_detec$end, sub_ref$start, sub_ref$end)), y = c(-1, 1), col = "white", pch = 21, yaxt = "n", ylab = "", xaxt = "n", xlab = "")
# plot references first
if (nrow(sub_ref) > 0)
for (i in 1:nrow(sub_ref)){
segments(
x0 = sub_ref$start[i],
x1 = sub_ref$end[i],
y0 = sep / -2,
y1 = sep / -2,
lwd = lwd,
col = viridis::magma(10, alpha = 0.4)[3],
lend = 1
)
text(x = (sub_ref$end[i] + sub_ref$start[i]) / 2, y = sep / -2, labels = i, col = "white")
}
# add detections
if (nrow(sub_detec) > 0)
for (i in 1:nrow(sub_detec)){
segments(
x0 = sub_detec$start[i],
x1 = sub_detec$end[i],
y0 = sep / 2,
y1 = sep / 2,
lwd = lwd,
col = viridis::magma(10, alpha = 0.4)[7],
lend = 1
)
text(x = (sub_detec$end[i] + sub_detec$start[i]) / 2, y = sep / 2, labels = sub_detec$labels[i])
}
}
}
### simulate annotation tables
# cannot have duration shorter than 2
sim_annotation <- function(n = 10, n.sound.files = 1){
sims_l <- lapply(1:n.sound.files, function(x){
possible_start <- seq(0, 98, 2)
sim_ref <- data.frame(sound.files = paste0(x, ".wav"), selec = 1:(n + 1), start = sort(c(sample(possible_start, n), 100)))
sim_ref$end <- NA
for(i in 1:(n))
sim_ref$end[i] <- sim_ref$start[i] + round(runif(n = 1, min = 1, max = sim_ref$start[i + 1] - sim_ref$start[i] - 0.5))
sim_ref <- sim_ref[-nrow(sim_ref), ]
return(sim_ref)
})
sims <- do.call(rbind, sims_l)
return(sims)
}
FUN <- "label_spectro"
#run function
source(file.path("./R", paste0(FUN,".R")))
# setwd(tempdir())
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
write.sound.files()
data("lbh_reference")
# EXAMPLES
lsr <- selection_table(lbh_reference, path = tempdir())
lbh_reference$sound.files
# EXAMPLES
lsr <- selection_table(lbh_reference[lbh_reference$sound.files ==  "lbh2.wav", ], path = tempdir())
# EXAMPLES
lsr <- selection_table(lbh_reference[lbh_reference$sound.files ==  "lbh2.wav", ], path = tempdir())
# an extra one in detection (1 false positive)
label_spectro(reference = lsr[-1, ], detection = lsr)
# an extra one in detection (1 false positive)
label_spectro(wave =  lbh2, reference = lsr[-1, ], detection = lsr)
# an extra one in detection (1 false positive)
label_spectro(wave =  lbh2, reference = lsr[-1, ], detection = lsr, envelope = TRUE)
wave =  lbh2
smooth = 5
collevels = seq(-100, 0, 5)
palette = viridis::viridis
if (!is.null(smooth)) {
smooth <- round(wave@samp.rate * smooth / 1000, 0)
}
# plot envelope
env_obj <- seewave::env(wave, colwave = "#07889B", ssmooth = smooth, plot = FALSE)
plot(x = env_obj[ ,1], y = env_obj[ ,2], type = "l", col = = "#07889B")
reference = lsr[-1, ]
detection = lsr
threshold = NULL
template.correlation = NULL
line.x.position = 2
hop.size = NULL
# adjust wl based on hope.size
if (!is.null(hop.size)) {
wl <- round(wave@samp.rate * hop.size / 1000, 0)
}
# reset graphic device on exit
oldpar <- par(no.readonly = TRUE)
on.exit(par(oldpar))
if (envelope | !is.null(template.correlation)) {
par(mfrow = c(2, 1), mar = c(0, 4, 1, 1))
} else {
par(mar = c(4, 4, 1, 1))
}
# plot spectrogram
seewave::spectro(
wave = wave,
grid = FALSE,
scale = FALSE,
palette = palette,
collevels = collevels,
axisX = if (envelope |
!is.null(template.correlation)) {
FALSE
} else {
TRUE
},
...
)
# plot spectrogram
seewave::spectro(
wave = wave,
grid = FALSE,
scale = FALSE,
palette = palette,
collevels = collevels,
axisX = if (envelope |
!is.null(template.correlation)) {
FALSE
} else {
TRUE
})
par(mfrow = c(2, 1), mar = c(0, 4, 1, 1))
# plot spectrogram
seewave::spectro(
wave = wave,
grid = FALSE,
scale = FALSE,
palette = palette,
collevels = collevels,
axisX = if (envelope |
!is.null(template.correlation)) {
FALSE
} else {
TRUE
},
...
)
# plot spectrogram
seewave::spectro(
wave = wave,
grid = FALSE,
scale = FALSE,
palette = palette,
collevels = collevels,
axisX = if (envelope |
!is.null(template.correlation)) {
FALSE
} else {
TRUE
})
# plot envelope
env_obj <- seewave::env(wave, colwave = "#07889B", ssmooth = smooth, plot = FALSE)
plot(x = env_obj[ ,1], y = env_obj[ ,2], type = "l", col = "#07889B")
# plot envelope
env_obj <- seewave::env(wave, colwave = "#07889B", ssmooth = smooth, plot = FALSE)
env_obj
head(env_obj)
plot(y = env_obj[ ,1], x = seq(0, seewave::duration(wave), length.out = nrow(env_obj)), type = "l", col = "#07889B")
# set graphic device for envelope
par(mar = c(4, 4, 0.3, 1))
plot(y = env_obj[ ,1], x = seq(0, seewave::duration(wave), length.out = nrow(env_obj)), type = "l", col = "#07889B", xlab = "Time", ylab = "Amplitude")
plot(y = env_obj[ ,1], x = seq(0, seewave::duration(wave), length.out = nrow(env_obj)), type = "l", col = "#07889B", xlab = "Time", ylab = "Amplitude")
plot(y = env_obj[ ,1], x = seq(0, seewave::duration(wave), length.out = nrow(env_obj)), type = "l", col = "#07889B", xlab = "Time", ylab = "Amplitude", yaxt = "n")
source("~/Dropbox/R_package_testing/ohun/R/label_spectro.R")
# an extra one in detection (1 false positive)
label_spectro(wave =  lbh2, reference = lsr[-1, ], detection = lsr, envelope = TRUE)
# an extra one in detection (1 false positive)
label_spectro(wave =  lbh2, reference = lsr[-1, ], detection = lsr, envelope = TRUE, xaxs = "i", yaxs = "i")
source("~/Dropbox/R_package_testing/ohun/R/label_spectro.R")
# an extra one in detection (1 false positive)
label_spectro(wave =  lbh2, reference = lsr[-1, ], detection = lsr, envelope = TRUE, xaxs = "i", yaxs = "i")
# an extra one in detection (1 false positive)
label_spectro(wave =  lbh2, reference = lsr[-1, ], detection = lsr, envelope = TRUE, xaxs = "i", yaxs = "i")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# an extra one in detection (1 false positive)
label_spectro(wave =  lbh2, reference = lsr[-1, ], detection = lsr, envelope = TRUE, xaxs = "i", yaxs = "i")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
devtools::install()
devtools::install()
source("~/Dropbox/R_package_testing/ohun/R/label_spectro.R")
FUN <- "label_spectro"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
write.sound.files()
data("lbh_reference")
# EXAMPLES
lsr <- selection_table(lbh_reference[lbh_reference$sound.files ==  "lbh2.wav", ], path = tempdir())
# an extra one in detection (1 false positive)
label_spectro(wave =  lbh2, reference = lsr[-1, ], detection = lsr, envelope = TRUE)
source("~/Dropbox/R_package_testing/ohun/R/label_spectro.R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
# usethis::use_coverage()
# pkgcheck::use_github_action_pkgcheck()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
